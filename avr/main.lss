
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000138  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001cc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a8  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000db  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000332  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  88:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_24>:
  // if you get here, something went very wrong
  return 0;
}

// this is called any time the TWI needs attention
ISR(TWI_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  // figure out what to do based on the TWI status (mask out the prescaler bits)
  switch(TWSR & 0xF8) {
  9c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  a0:	88 7f       	andi	r24, 0xF8	; 248
  a2:	88 38       	cpi	r24, 0x88	; 136
  a4:	b9 f0       	breq	.+46     	; 0xd4 <__vector_24+0x44>
  a6:	f0 f4       	brcc	.+60     	; 0xe4 <__vector_24+0x54>
  a8:	80 37       	cpi	r24, 0x70	; 112
  aa:	c1 f0       	breq	.+48     	; 0xdc <__vector_24+0x4c>
  ac:	78 f4       	brcc	.+30     	; 0xcc <__vector_24+0x3c>
  ae:	80 36       	cpi	r24, 0x60	; 96
  b0:	a9 f0       	breq	.+42     	; 0xdc <__vector_24+0x4c>
  b2:	88 36       	cpi	r24, 0x68	; 104
  b4:	99 f0       	breq	.+38     	; 0xdc <__vector_24+0x4c>
    default:
      break;
  }

  // clear the interrupt flag, allowing the TWI hardware to take its next action
  TWCR &= ~_BV(TWINT);
  b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ba:	8f 77       	andi	r24, 0x7F	; 127
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti
  switch(TWSR & 0xF8) {
  cc:	88 37       	cpi	r24, 0x78	; 120
  ce:	31 f0       	breq	.+12     	; 0xdc <__vector_24+0x4c>
  d0:	80 38       	cpi	r24, 0x80	; 128
  d2:	89 f7       	brne	.-30     	; 0xb6 <__vector_24+0x26>
      twi_byte = TWDR;
  d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
      TWCR |= _BV(TWINT) | _BV(TWEA);
  dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e0:	80 6c       	ori	r24, 0xC0	; 192
  e2:	19 c0       	rjmp	.+50     	; 0x116 <__vector_24+0x86>
  switch(TWSR & 0xF8) {
  e4:	80 3a       	cpi	r24, 0xA0	; 160
  e6:	d1 f3       	breq	.-12     	; 0xdc <__vector_24+0x4c>
  e8:	28 f4       	brcc	.+10     	; 0xf4 <__vector_24+0x64>
  ea:	80 39       	cpi	r24, 0x90	; 144
  ec:	99 f3       	breq	.-26     	; 0xd4 <__vector_24+0x44>
  ee:	88 39       	cpi	r24, 0x98	; 152
  f0:	89 f3       	breq	.-30     	; 0xd4 <__vector_24+0x44>
  f2:	e1 cf       	rjmp	.-62     	; 0xb6 <__vector_24+0x26>
  f4:	80 3b       	cpi	r24, 0xB0	; 176
  f6:	21 f0       	breq	.+8      	; 0x100 <__vector_24+0x70>
  f8:	88 3c       	cpi	r24, 0xC8	; 200
  fa:	81 f3       	breq	.-32     	; 0xdc <__vector_24+0x4c>
  fc:	88 3a       	cpi	r24, 0xA8	; 168
  fe:	d9 f6       	brne	.-74     	; 0xb6 <__vector_24+0x26>
      TWDR = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      TWCR |= _BV(TWINT);
 106:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      TWCR &= ~_BV(TWEA);
 110:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 114:	8f 7b       	andi	r24, 0xBF	; 191
      TWCR |= _BV(TWINT) | _BV(TWEA);
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 11a:	cd cf       	rjmp	.-102    	; 0xb6 <__vector_24+0x26>

0000011c <main>:
  PRR &= ~_BV(PRTWI);
 11c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  TWAR = (TWI_ADDR << 1) && 0x01;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  TWCR = 0x00 | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);
 12c:	85 e4       	ldi	r24, 0x45	; 69
 12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x16>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
