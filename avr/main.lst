   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB0:
  15               		.file 1 "main.c"
   1:main.c        **** /*  Nick Piscitello
   2:main.c        ****  *  March 2018
   3:main.c        ****  *  Atmel ATMEGA328-PU
   4:main.c        ****  *  fuses: default( l: 0x62, h: 0xD9, e: 0x07)
   5:main.c        ****  *  system clock: 8MHz / 8 = 1MHz
   6:main.c        ****  */
   7:main.c        **** 
   8:main.c        **** #include <avr/io.h>
   9:main.c        **** #include <avr/interrupt.h>
  10:main.c        **** #include <util/twi.h>
  11:main.c        **** 
  12:main.c        **** // must be 7 bits
  13:main.c        **** #define TWI_ADDR 0x01
  14:main.c        **** 
  15:main.c        **** volatile uint8_t twi_byte = 0x00;
  16:main.c        **** 
  17:main.c        **** int main(void) {
  16               		.loc 1 17 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  18:main.c        **** 
  19:main.c        ****   // power on the TWI interface
  20:main.c        ****   PRR &= ~_BV(PRTWI);
  22               		.loc 1 20 0
  23 0000 8091 6400 		lds r24,100
  24 0004 8F77      		andi r24,lo8(127)
  25 0006 8093 6400 		sts 100,r24
  21:main.c        **** 
  22:main.c        ****   // setup TWI - see pages 279 and 283. Start in SR mode.
  23:main.c        ****   // set the slave address
  24:main.c        ****   TWAR = (TWI_ADDR << 1) && 0x01;
  26               		.loc 1 24 0
  27 000a 81E0      		ldi r24,lo8(1)
  28 000c 8093 BA00 		sts 186,r24
  25:main.c        ****   // enable the TWI (TWEN) with interrupts (TWIE) and 
  26:main.c        ****   // connect it to the bus (TWEA) in slave mode (TWSTA)
  27:main.c        ****   TWCR = 0x00 | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);
  29               		.loc 1 27 0
  30 0010 85E4      		ldi r24,lo8(69)
  31 0012 8093 BC00 		sts 188,r24
  32               	.L2:
  33 0016 00C0      		rjmp .L2
  34               		.cfi_endproc
  35               	.LFE0:
  37               		.text
  38               	.global	__vector_24
  40               	__vector_24:
  41               	.LFB1:
  28:main.c        **** 
  29:main.c        ****   // the I2C bus is entirely responsive (slave), so let it wait for stuff
  30:main.c        ****   while(1){};
  31:main.c        **** 
  32:main.c        ****   // if you get here, something went very wrong
  33:main.c        ****   return 0;
  34:main.c        **** }
  35:main.c        **** 
  36:main.c        **** // this is called any time the TWI needs attention
  37:main.c        **** ISR(TWI_vect) {
  42               		.loc 1 37 0
  43               		.cfi_startproc
  44 0000 1F92      		push r1
  45               	.LCFI0:
  46               		.cfi_def_cfa_offset 3
  47               		.cfi_offset 1, -2
  48 0002 0F92      		push r0
  49               	.LCFI1:
  50               		.cfi_def_cfa_offset 4
  51               		.cfi_offset 0, -3
  52 0004 0FB6      		in r0,__SREG__
  53 0006 0F92      		push r0
  54 0008 1124      		clr __zero_reg__
  55 000a 8F93      		push r24
  56               	.LCFI2:
  57               		.cfi_def_cfa_offset 5
  58               		.cfi_offset 24, -4
  59               	/* prologue: Signal */
  60               	/* frame size = 0 */
  61               	/* stack size = 4 */
  62               	.L__stack_usage = 4
  38:main.c        ****   // figure out what to do based on the TWI status (mask out the prescaler bits)
  39:main.c        ****   switch(TWSR & 0xF8) {
  63               		.loc 1 39 0
  64 000c 8091 B900 		lds r24,185
  65 0010 887F      		andi r24,lo8(-8)
  66 0012 8838      		cpi r24,lo8(-120)
  67 0014 01F0      		breq .L5
  68 0016 00F4      		brsh .L6
  69 0018 8037      		cpi r24,lo8(112)
  70 001a 01F0      		breq .L12
  71 001c 00F4      		brsh .L8
  72 001e 8036      		cpi r24,lo8(96)
  73 0020 01F0      		breq .L12
  74 0022 8836      		cpi r24,lo8(104)
  75 0024 01F0      		breq .L12
  76               	.L4:
  40:main.c        ****     // Slave Receiver mode
  41:main.c        ****     // intentional fallthrough - our own address (or all call) has been received
  42:main.c        ****     case 0x60:
  43:main.c        ****     case 0x68:
  44:main.c        ****     case 0x70:
  45:main.c        ****     case 0x78:
  46:main.c        ****       // receive data byte, return ACK
  47:main.c        ****       TWCR |= _BV(TWINT) | _BV(TWEA);
  48:main.c        ****       break;
  49:main.c        **** 
  50:main.c        ****     // Intentional fallthrough - we got data!
  51:main.c        ****     case 0x80:
  52:main.c        ****     case 0x88:
  53:main.c        ****     case 0x90:
  54:main.c        ****     case 0x98:
  55:main.c        ****       // store data byte, return ACK
  56:main.c        ****       twi_byte = TWDR;
  57:main.c        ****       TWCR |= _BV(TWINT) | _BV(TWEA);
  58:main.c        ****       break;
  59:main.c        **** 
  60:main.c        ****     // stop or repeated start
  61:main.c        ****     case 0xA0:
  62:main.c        ****       // eh, ignore. Make sure we'll be listening.
  63:main.c        ****       TWCR |= _BV(TWINT) | _BV(TWEA);
  64:main.c        ****       break;
  65:main.c        **** 
  66:main.c        ****     // Slave Transmitter mode
  67:main.c        ****     // intentional fallthrough - we got a data request!
  68:main.c        ****     case 0xA8:
  69:main.c        ****     case 0xB0:
  70:main.c        ****       // push dummy data to the data register
  71:main.c        ****       TWDR = 0xFF;
  72:main.c        ****       // this is the only byte we're sending
  73:main.c        ****       TWCR |= _BV(TWINT);
  74:main.c        ****       TWCR &= ~_BV(TWEA);
  75:main.c        ****       break;
  76:main.c        **** 
  77:main.c        ****     // intentional fallthrough - these shouldn't occur (non-last data byte transmitted)
  78:main.c        ****     case 0xB8:
  79:main.c        ****     case 0xC0:
  80:main.c        ****       break;
  81:main.c        **** 
  82:main.c        ****     // last data byte transmitted
  83:main.c        ****     case 0xC8:
  84:main.c        ****       // reset the system
  85:main.c        ****       TWCR |= _BV(TWINT) | _BV(TWEA);
  86:main.c        ****       break;
  87:main.c        **** 
  88:main.c        ****     // something went really wrong...
  89:main.c        ****     default:
  90:main.c        ****       break;
  91:main.c        ****   }
  92:main.c        **** 
  93:main.c        ****   // clear the interrupt flag, allowing the TWI hardware to take its next action
  94:main.c        ****   TWCR &= ~_BV(TWINT);
  77               		.loc 1 94 0
  78 0026 8091 BC00 		lds r24,188
  79 002a 8F77      		andi r24,lo8(127)
  80 002c 8093 BC00 		sts 188,r24
  81               	/* epilogue start */
  95:main.c        **** }
  82               		.loc 1 95 0
  83 0030 8F91      		pop r24
  84 0032 0F90      		pop r0
  85 0034 0FBE      		out __SREG__,r0
  86 0036 0F90      		pop r0
  87 0038 1F90      		pop r1
  88 003a 1895      		reti
  89               	.L8:
  39:main.c        ****     // Slave Receiver mode
  90               		.loc 1 39 0
  91 003c 8837      		cpi r24,lo8(120)
  92 003e 01F0      		breq .L12
  93 0040 8038      		cpi r24,lo8(-128)
  94 0042 01F4      		brne .L4
  95               	.L5:
  56:main.c        ****       TWCR |= _BV(TWINT) | _BV(TWEA);
  96               		.loc 1 56 0
  97 0044 8091 BB00 		lds r24,187
  98 0048 8093 0000 		sts twi_byte,r24
  99               	.L12:
  85:main.c        ****       break;
 100               		.loc 1 85 0
 101 004c 8091 BC00 		lds r24,188
 102 0050 806C      		ori r24,lo8(-64)
 103 0052 00C0      		rjmp .L43
 104               	.L6:
  39:main.c        ****     // Slave Receiver mode
 105               		.loc 1 39 0
 106 0054 803A      		cpi r24,lo8(-96)
 107 0056 01F0      		breq .L12
 108 0058 00F4      		brsh .L10
 109 005a 8039      		cpi r24,lo8(-112)
 110 005c 01F0      		breq .L5
 111 005e 8839      		cpi r24,lo8(-104)
 112 0060 01F0      		breq .L5
 113 0062 00C0      		rjmp .L4
 114               	.L10:
 115 0064 803B      		cpi r24,lo8(-80)
 116 0066 01F0      		breq .L11
 117 0068 883C      		cpi r24,lo8(-56)
 118 006a 01F0      		breq .L12
 119 006c 883A      		cpi r24,lo8(-88)
 120 006e 01F4      		brne .L4
 121               	.L11:
  71:main.c        ****       // this is the only byte we're sending
 122               		.loc 1 71 0
 123 0070 8FEF      		ldi r24,lo8(-1)
 124 0072 8093 BB00 		sts 187,r24
  73:main.c        ****       TWCR &= ~_BV(TWEA);
 125               		.loc 1 73 0
 126 0076 8091 BC00 		lds r24,188
 127 007a 8068      		ori r24,lo8(-128)
 128 007c 8093 BC00 		sts 188,r24
  74:main.c        ****       break;
 129               		.loc 1 74 0
 130 0080 8091 BC00 		lds r24,188
 131 0084 8F7B      		andi r24,lo8(-65)
 132               	.L43:
  85:main.c        ****       break;
 133               		.loc 1 85 0
 134 0086 8093 BC00 		sts 188,r24
  86:main.c        **** 
 135               		.loc 1 86 0
 136 008a 00C0      		rjmp .L4
 137               		.cfi_endproc
 138               	.LFE1:
 140               	.global	twi_byte
 141               		.section .bss
 144               	twi_byte:
 145 0000 00        		.zero	1
 146               		.text
 147               	.Letext0:
 148               		.file 2 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccQvzE4l.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQvzE4l.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQvzE4l.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQvzE4l.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQvzE4l.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQvzE4l.s:13     .text.startup:0000000000000000 main
     /tmp/ccQvzE4l.s:40     .text:0000000000000000 __vector_24
     /tmp/ccQvzE4l.s:144    .bss:0000000000000000 twi_byte

UNDEFINED SYMBOLS
__do_clear_bss
